<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing 2023 I</title><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/</link><description>Recent content on Visual Computing 2023 I</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/1-ProceduralTexturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/1-ProceduralTexturing/</guid><description>Procedural Procedural_Texturing # En computación gráfica, una textura procedimental es una textura creada mediante una descripción matemática (es decir, un algoritmo), en lugar de datos almacenados directamente. La ventaja de este enfoque es el bajo coste de almacenamiento, la resolución ilimitada de las texturas y la facilidad de mapeo de las mismas.
VisualComputing2023-I/showcase/content/sketches/Shaders/Procedural_Texturing/texturing_bricks.frag JuanCll/showcase/content/sketches/SHADERS/texturing/texturing.js
procedural Procedural_Texturing js let pg; let colt; let truchetShader; let colorShader; let brickShader; let dotsShader; let textura; const opcionesS = {&amp;#39;None&amp;#39;: 0, &amp;#39;truchet&amp;#39;:1, &amp;#39;color&amp;#39;:2,&amp;#39;bricks&amp;#39;:3,&amp;#39;dots&amp;#39;:4, &amp;#39;plasma&amp;#39;:5}; function preload() { // shader adapted from here: https://thebookofshaders.</description></item></channel></rss>