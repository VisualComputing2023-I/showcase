<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing 2023 I</title><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/</link><description>Recent content on Visual Computing 2023 I</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/Texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/Texturing/</guid><description>Procedural texturing âš½ # Exercise Adapte otros patrones del libro de shaders y apliquelos a otras figuras 3D.
Source Code (Ejercicio 1) # Los fragment shaders correspondientes fueron tomados de el libro de shaders.
Source Code: JavaScript let pg; let truchetShader; function preload() { // shader adapted from here: https://thebookofshaders.com/09/ truchetShader = readShader(&amp;#39;/showcase/sketches/procedular/bricks.frag&amp;#39;, { matrices: Tree.NONE, varyings: Tree.NONE }); } function setup() { createCanvas(400, 400, WEBGL); // create frame buffer object to render the procedural texture pg = createGraphics(400, 400, WEBGL); textureMode(NORMAL); noStroke(); pg.</description></item></channel></rss>