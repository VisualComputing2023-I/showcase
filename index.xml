<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Visual Computing 2023 I</title><link>https://visualcomputing2023-i.github.io/showcase/</link><description>Recent content in Introduction on Visual Computing 2023 I</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing2023-i.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/p5/iframe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/p5/iframe/</guid><description>p5 iframe shortcodes embed p5.js code within an iframe element. There are two p5 iframe shortcodes: p5-iframe and p5-global-iframe.
p5-iframe # {{&amp;lt; p5-iframe ver=&amp;#34;1.5.0&amp;#34; sketch=&amp;#34;/path/to/sketch.js&amp;#34; lib1=&amp;#34;https://cdntolib1/lib1.js&amp;#34; width=&amp;#34;800&amp;#34; height=&amp;#34;600&amp;#34; &amp;gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.
Color relativity # Look at this brief explanation about what color relativity is.
p5-iframe markdown {{&amp;lt; p5-iframe sketch=&amp;#34;/showcase/sketches/colors.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/p5/div/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/p5/div/</guid><description>p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div.
p5-div # {{&amp;lt; p5-div ver=&amp;#34;1.5.0&amp;#34; sketch=&amp;#34;/path/to/sketch.js&amp;#34; lib1=&amp;#34;https://cdntolib1/lib1.js&amp;#34; &amp;gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.
Scintillating grid # Look at this and also this among many more references there are.
p5-div markdown {{&amp;lt; p5-div sketch=&amp;#34;/showcase/sketches/scintillating.</description></item><item><title>Creating a New Theme</title><link>https://visualcomputing2023-i.github.io/showcase/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://visualcomputing2023-i.github.io/showcase/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://visualcomputing2023-i.github.io/showcase/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://visualcomputing2023-i.github.io/showcase/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/1-ProceduralTexturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/1-ProceduralTexturing/</guid><description>Procedural Procedural_Texturing # En computación gráfica, una textura procedimental es una textura creada mediante una descripción matemática (es decir, un algoritmo), en lugar de datos almacenados directamente. La ventaja de este enfoque es el bajo coste de almacenamiento, la resolución ilimitada de las texturas y la facilidad de mapeo de las mismas.
procedural Procedural_Texturing js let pg; let colt; let truchetShader; let colorShader; let brickShader; let dotsShader; let textura; const opcionesS = {&amp;#39;None&amp;#39;: 0, &amp;#39;truchet&amp;#39;:1, &amp;#39;color&amp;#39;:2,&amp;#39;bricks&amp;#39;:3,&amp;#39;dots&amp;#39;:4, &amp;#39;plasma&amp;#39;:5}; function preload() { // shader adapted from here: https://thebookofshaders.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/team/Diego-Alvarado/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/team/Diego-Alvarado/</guid><description>Diego Alejandro Alvarado Chaparro # dalvaradoc@unal.edu.co # Estudiante de Ingeniería de Sistemas y Computación, mis espectativas del curso es aprender los conceptos básicos de la computación gráfica y el procesamiento de imágenes ya que estos conceptos siempre me han parecido interesantes. Me interesan las ramas de la teoría de la computación, arquitectura de software e inteligencia artifical.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/team/Juli%C3%A1n-Manosalva/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/team/Juli%C3%A1n-Manosalva/</guid><description>Julian Alexander Manosalva Manrique # Contacto: jmanosalva@unal.edu.co
Ingeniería de Sistemas y Computación UNAL Sobre mí:
Soy una persona interesada en la computación y en los deportes.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/team/Sebasti%C3%A1n-Pach%C3%B3n/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/team/Sebasti%C3%A1n-Pach%C3%B3n/</guid><description>Juan Sebastián Pachón Carvajal # jupachonc@unal.edu.co # Sobre Mí # Estudiande de noveno semestre de Ingeniería de Sistemas y Computación, mi mayor interés profesional pasa por la arquitectura de software y en general el desarrollo backend.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/VisualIllutions/1-Visual-Illutions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/VisualIllutions/1-Visual-Illutions/</guid><description>1 - Visual Illutions # Exercise
Estudiar, poner en práctica y discutir posibles aplicaciones de algunos fenómenos visuales e ilusiones ópticas conocidos. Introducción # ¿Qué es una ilusión óptica? # Una ilusión óptica es una imagen que engaña el sistema visual, desde el ojo al cerebro, y lo lleva a percibir la realidad de forma distorsionada.
Las ilusiones ópticas pueden suceder de manera natural o ser creadas por efectos visuales específicos.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/VisualIllutions/2-Masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/VisualIllutions/2-Masking/</guid><description>2 - Masking # Ejercicio Implementar un kinegram y algunos patrones de moiré que están estrechamente relacionado con el fenómeno de masking. Introducción # Kinegram - Scanimation # Los scanimations son un tipo de kinegramas. Estos son una ilusión óptica que se produce cuando un dibujo, fotograma opatrón gráfico adquiere movimiento.
Consta de dos partes: un dibujo “formado por diversas rayas de diferentegrosor y disposición” y una pantalla transparente de plástico con franjas o rayas.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/VisualIllutions/3-Mach-Bands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/VisualIllutions/3-Mach-Bands/</guid><description>3 - Mach Bands # Ejercicio Desarrolle una aplicación de visualización de terrenos. Revise el tutorial de Coding Train sobre la generación de terrenos en 3D con ruido de Perlin.
Introducción # La visualización de terrenos se ha realizado por muchos años mediante modos tradicionales con dibujos en representaciones planas en 2D para fines militares y de estudio de la geografía. Pero con la llegada de la computación y la capacidad de generar imagenes en 3D, se desarrollaron diferentes técnicas para poder visualizar y crear terrenos para no solo los mismos fines sino también otros como los videojuegos y los simuladores de vuelos.</description></item></channel></rss>