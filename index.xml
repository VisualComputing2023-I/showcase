<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Visual Computing 2023 I</title><link>https://visualcomputing2023-i.github.io/showcase/</link><description>Recent content in Introduction on Visual Computing 2023 I</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing2023-i.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/p5/iframe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/p5/iframe/</guid><description>p5 iframe shortcodes embed p5.js code within an iframe element. There are two p5 iframe shortcodes: p5-iframe and p5-global-iframe.
p5-iframe # {{&amp;lt; p5-iframe ver=&amp;#34;1.5.0&amp;#34; sketch=&amp;#34;/path/to/sketch.js&amp;#34; lib1=&amp;#34;https://cdntolib1/lib1.js&amp;#34; width=&amp;#34;800&amp;#34; height=&amp;#34;600&amp;#34; &amp;gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.
Color relativity # Look at this brief explanation about what color relativity is.
p5-iframe markdown {{&amp;lt; p5-iframe sketch=&amp;#34;/showcase/sketches/colors.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/p5/div/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/p5/div/</guid><description>p5 div shortcodes embed p5.js code within a div element. There are two p5 div shortcodes: p5-div and p5-instance-div.
p5-div # {{&amp;lt; p5-div ver=&amp;#34;1.5.0&amp;#34; sketch=&amp;#34;/path/to/sketch.js&amp;#34; lib1=&amp;#34;https://cdntolib1/lib1.js&amp;#34; &amp;gt;}} All parameters are optional but sketch. Default values are shown in the above snippet but for libs*. Up to lib5 libs may be specified.
Scintillating grid # Look at this and also this among many more references there are.
p5-div markdown {{&amp;lt; p5-div sketch=&amp;#34;/showcase/sketches/scintillating.</description></item><item><title>Creating a New Theme</title><link>https://visualcomputing2023-i.github.io/showcase/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://visualcomputing2023-i.github.io/showcase/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
‚ñæ &amp;lt;root&amp;gt;/ ‚ñæ images/ logo.png should become
‚ñæ &amp;lt;root&amp;gt;/ ‚ñæ static/ ‚ñæ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://visualcomputing2023-i.github.io/showcase/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://visualcomputing2023-i.github.io/showcase/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/1-ProceduralTexturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/1-ProceduralTexturing/</guid><description>1 - Procedural texturing # Ejercicio Adapte otros patrones del libro de shaders (consulte tambi√©n la colecci√≥n shadertoy) y mapeelos como texturas sobre otras formas 3D.
Introducci√≥n # El &amp;ldquo;procedural texturing&amp;rdquo; o &amp;ldquo;texturizado procedural&amp;rdquo; es una t√©cnica en computaci√≥n visual que se utiliza para generar texturas de manera algor√≠tmica, en lugar de crearlas manualmente. Esto se logra mediante la definici√≥n de reglas y procedimientos matem√°ticos que permiten generar patrones y detalles en la textura de manera autom√°tica.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/2-ImageProcessing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/Shaders/2-ImageProcessing/</guid><description>Image/Video processing üñºÔ∏è # Workshop Implement an image / video processing app supporting different masks, including other kernel sizes different than 3x3, and:
A region-of-interest base tool to selectively apply a given mask.Hint: circular regions around the mouse pointer are handy and quite simple to implement by means of glsl distance. A magnifier tool. Requires a bit of research. For instance, look for it in shadertoy. Integrate luma and other coloring brightness tools.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/team/Diego-Alvarado/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/team/Diego-Alvarado/</guid><description>Diego Alejandro Alvarado Chaparro # dalvaradoc@unal.edu.co # Estudiante de Ingenier√≠a de Sistemas y Computaci√≥n, mis espectativas del curso es aprender los conceptos b√°sicos de la computaci√≥n gr√°fica y el procesamiento de im√°genes ya que estos conceptos siempre me han parecido interesantes. Me interesan las ramas de la teor√≠a de la computaci√≥n, arquitectura de software e inteligencia artifical.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/team/Juli%C3%A1n-Manosalva/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/team/Juli%C3%A1n-Manosalva/</guid><description>Julian Alexander Manosalva Manrique # Contacto: jmanosalva@unal.edu.co
Ingenier√≠a de Sistemas y Computaci√≥n UNAL Sobre m√≠:
Soy una persona interesada en la computaci√≥n y en los deportes.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/team/Sebasti%C3%A1n-Pach%C3%B3n/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/team/Sebasti%C3%A1n-Pach%C3%B3n/</guid><description>Juan Sebasti√°n Pach√≥n Carvajal # jupachonc@unal.edu.co # Sobre M√≠ # Estudiande de noveno semestre de Ingenier√≠a de Sistemas y Computaci√≥n, mi mayor inter√©s profesional pasa por la arquitectura de software y en general el desarrollo backend.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/VisualIllutions/1-Visual-Illutions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/VisualIllutions/1-Visual-Illutions/</guid><description>1 - Visual Illutions # Exercise
Estudiar, poner en pr√°ctica y discutir posibles aplicaciones de algunos fen√≥menos visuales e ilusiones √≥pticas conocidos. Introducci√≥n # ¬øQu√© es una ilusi√≥n √≥ptica? # Una ilusi√≥n √≥ptica es una imagen que enga√±a el sistema visual, desde el ojo al cerebro, y lo lleva a percibir la realidad de forma distorsionada.
Las ilusiones √≥pticas pueden suceder de manera natural o ser creadas por efectos visuales espec√≠ficos.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/VisualIllutions/2-Masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/VisualIllutions/2-Masking/</guid><description>2 - Masking # Ejercicio Implementar un kinegram y algunos patrones de moir√© que est√°n estrechamente relacionado con el fen√≥meno de masking. Introducci√≥n # Kinegram - Scanimation # Los scanimations son un tipo de kinegramas. Estos son una ilusi√≥n √≥ptica que se produce cuando un dibujo, fotograma opatr√≥n gr√°fico adquiere movimiento.
Consta de dos partes: un dibujo ‚Äúformado por diversas rayas de diferentegrosor y disposici√≥n‚Äù y una pantalla transparente de pl√°stico con franjas o rayas.</description></item><item><title/><link>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/VisualIllutions/3-Mach-Bands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing2023-i.github.io/showcase/docs/shortcodes/VisualIllutions/3-Mach-Bands/</guid><description>3 - Mach Bands # Ejercicio Desarrolle una aplicaci√≥n de visualizaci√≥n de terrenos. Revise el tutorial de Coding Train sobre la generaci√≥n de terrenos en 3D con ruido de Perlin.
Introducci√≥n # La visualizaci√≥n de terrenos se ha realizado por muchos a√±os mediante modos tradicionales con dibujos en representaciones planas en 2D para fines militares y de estudio de la geograf√≠a. Pero con la llegada de la computaci√≥n y la capacidad de generar imagenes en 3D, se desarrollaron diferentes t√©cnicas para poder visualizar y crear terrenos para no solo los mismos fines sino tambi√©n otros como los videojuegos y los simuladores de vuelos.</description></item></channel></rss>